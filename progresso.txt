yarn init -y

yarn add express

criar pasta src
criar app, server e routes.js

criar o editorconfig
yarn add eslint prettier eslint-config-prettier eslint-plugin-prettier babel-eslint -D
yarn eslint --init

utilizar o sucrase para utilizar import
yarn add sucrase nodemon -D

adicionar nos scripts no package.json para rodar o nodemon sucrase
e junto a isso, para que funcione o sucrase, criamos o nodemon.json

Primeiro commit

docker run --name desafio -e POSTGRES_PASSWORD=desafio -p 5432:5432 -d postgres

parar acessar no postbird:
usuario postgres
senha desafio

criei banco de dados fastfeet no postbird

Criei o arquivo database na pasta config
Criar a pasta migrations
Colocar o .rcsequelizerc
Instalar sequelize

yarn add sequelize
yarn add sequelize-cli -D
yarn add pg pg-hstore

Segundo commit

Criando a migration de usuarios
yarn sequelize migration:create --name=create-users
Criei a migration de usuario de acordo com o modelo do git do seeds que ele da

yarn sequelize db:migrate

yarn add bcryptjs
yarn sequelize seed:generate --name admin-user

yarn sequelize db:seed:all

Terceiro commit

Criar pasta app
Criar pasta controllers
Criar pasta models

Criamos o User.js
Criamos o index na pasta database para conseguir fazer a conexao do model com o database
importar models no index js criado acima

import database no app.js

Crio uma rota no routes pra testar se o model esta funcionando
Testamos a rota e ainda podemos ver que foi criado no banco de dados o usuario

Criar o controller de users
Criar a rota de store no routes
Testamos no insomnia

Criar verificacao de email unico no controller
instalar o bcryptjs

Criamos o campo password virtual no model de usuario
Adicionar o hook no model para criar o password hash
Testar no insomnia

Quarto Commit